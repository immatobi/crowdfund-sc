// SPDX-License-Identifier: MIT

pragma solidity >=0.4.12 <0.9.0;
// pragma solidity 0.7.4;


interface IBEP20 {
  /**
   * @dev Returns the amount of tokens in existence.
   */
  function totalSupply() external view returns (uint256);

  /**
   * @dev Returns the token decimals.
   */
  function decimals() external view returns (uint8);

  /**
   * @dev Returns the token symbol.
   */
  function symbol() external view returns (string memory);

  /**
  * @dev Returns the token name.
  */
  function name() external view returns (string memory);

  /**
   * @dev Returns the bep token owner.
   */
  function getOwner() external view returns (address);

  /**
   * @dev Returns the amount of tokens owned by `account`.
   */
  function balanceOf(address account) external view returns (uint256);

  function burnFrom(uint256 amount) external;

  /**
   * @dev Moves `amount` tokens from the caller's account to `recipient`.
   *
   * Returns a boolean value indicating whether the operation succeeded.
   *
   * Emits a {Transfer} event.
   */
  function transfer(address recipient, uint256 amount) external returns (bool);

  /**
   * @dev Returns the remaining number of tokens that `spender` will be
   * allowed to spend on behalf of `owner` through {transferFrom}. This is
   * zero by default.
   *
   * This value changes when {approve} or {transferFrom} are called.
   */
  function allowance(address _owner, address spender) external view returns (uint256);

  /**
   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
   *
   * Returns a boolean value indicating whether the operation succeeded.
   *
   * IMPORTANT: Beware that changing an allowance with this method brings the risk
   * that someone may use both the old and the new allowance by unfortunate
   * transaction ordering. One possible solution to mitigate this race
   * condition is to first reduce the spender's allowance to 0 and set the
   * desired value afterwards:
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
   *
   * Emits an {Approval} event.
   */
  function approve(address spender, uint256 amount) external returns (bool);

  /**
   * @dev Moves `amount` tokens from `sender` to `recipient` using the
   * allowance mechanism. `amount` is then deducted from the caller's
   * allowance.
   *
   * Returns a boolean value indicating whether the operation succeeded.
   *
   * Emits a {Transfer} event.
   */
  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

  /**
   * @dev Emitted when `value` tokens are moved from one account (`from`) to
   * another (`to`).
   *
   * Note that `value` may be zero.
   */
  event Transfer(address indexed from, address indexed to, uint256 value);

  /**
   * @dev Emitted when the allowance of a `spender` for an `owner` is set by
   * a call to {approve}. `value` is the new allowance.
   */
  event Approval(address indexed owner, address indexed spender, uint256 value);
}

/**
 * @title Initializable
 *
 * @dev Helper contract to support initializer functions. To use it, replace
 * the constructor with a function that has the `initializer` modifier.
 * WARNING: Unlike constructors, initializer functions must be manually
 * invoked. This applies both to deploying an Initializable contract, as well
 * as extending an Initializable contract via inheritance.
 * WARNING: When used with inheritance, manual care must be taken to not invoke
 * a parent initializer twice, or ensure that all initializers are idempotent,
 * because this is not dealt with automatically as with constructors.
 */
contract Initializable {

  /**
   * @dev Indicates that the contract has been initialized.
   */
  bool private initialized;

  /**
   * @dev Indicates that the contract is in the process of being initialized.
   */
  bool private initializing;

  /**
   * @dev Modifier to use in the initializer function of a contract.
   */
  modifier initializer() {
    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");

    bool isTopLevelCall = !initializing;
    if (isTopLevelCall) {
      initializing = true;
      initialized = true;
    }

    _;

    if (isTopLevelCall) {
      initializing = false;
    }
  }

  /// @dev Returns true if and only if the function is running in the constructor
  function isConstructor() private view returns (bool) {
    // extcodesize checks the size of the code stored in an address, and
    // address returns the current address. Since the code is still not
    // deployed when running a constructor, any checks on its code size will
    // yield zero, making it an effective way to detect if a contract is
    // under construction or not.
    address self = address(this);
    uint256 cs;
    assembly { cs := extcodesize(self) }
    return cs == 0;
  }

  // Reserved storage space to allow for layout changes in the future.
  uint256[50] private ______gap;
}

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     *
     * _Available since v2.4.0._
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     *
     * _Available since v2.4.0._
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     *
     * _Available since v2.4.0._
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

/**
 * SPDX-License-Identifier: <SPDX-License>
 * @dev Implementation of the {COX} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {COXPresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.zeppelin.solutions/t/how-to-implement-COX-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin guidelines: functions revert instead
 * of returning `false` on failure. This behavior is nonetheless conventional
 * and does not conflict with the expectations of COX applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {COX-approve}.
 */
contract COX is Initializable {
    
    using SafeMath for uint256;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;
    uint8 private _decimals;

    bool private _enableStake;
    uint256 private _Min_Stake;

    uint256 private _stake_tax;
    uint256 private _reward_tax;
    bool private _burn_tax;

    uint256 private _Scale;
    uint256 private constant SECONDS_PER_DAY = 24 * 60 * 60;

    mapping(uint => uint256 ) private _packages;
    mapping(uint=> string) private _package_names;
    mapping(uint => uint)  private _package_duration;

    IBEP20 private csr;
    address private _csrp;

    struct StakeData {
        uint id;
        string package;
        uint256 intPerDay;
        uint256 duration;
        uint256 totalStaked;
        uint256 timestamp;
        bool redeemed;
    }

    struct Party {
		uint256 balance;
		uint256 staked;
        StakeData[] stakes;
		mapping(address => uint256) allowance;
	}

	struct Board {
		uint256 totalSupply;
		uint256 totalStaked;
		uint256 totalStakers;
		address owner;
        mapping(address => Party) parties;
	}


    Board private _board;



    event Transfer(address indexed from, address indexed to, uint256 tokens);
	event Approval(address indexed owner, address indexed spender, uint256 tokens);
	event Stake(address indexed owner, uint256 tokens);
	event UnStake(address indexed owner, uint256 tokens);
    event StakeGain(address indexed owner, uint256 tokens);
	event Burn(uint256 tokens);

    modifier whenStakeEnabled {
        require(_enableStake, "Can only be called when Staking is Enabled.");
        _;
    }

    modifier onlyOwner {
        require(msg.sender == _board.owner, "Can only be called by the owner.");
        _;
    }

    modifier onlyStakeRewardTokenContract {
        require(msg.sender == address(csr), "only stake reward token can call this.");
        _;
    }


    /**
     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with
     * a default value of 18.
     *
     * To select a different value for {decimals}, use {_setupDecimals}.
     *
     * All three of these values are immutable: they can only be set once during
     * construction.
     */
    function initialize(string calldata name, string calldata symbol,uint256 stake_tax,uint256 reward_tax,IBEP20 _csr) external initializer {

       _totalSupply = 35e25;
       _name = name;
       _symbol = symbol;
       _decimals = 18;
       
       _Scale = 2**64;
       _Min_Stake= 1e18;

       _enableStake = true;

       _stake_tax = stake_tax;
       _reward_tax = reward_tax;
       _burn_tax = true;

       csr = _csr;
       _csrp = msg.sender;
       
        _board.owner = msg.sender;
		_board.totalSupply = _totalSupply;
		_board.parties[msg.sender].balance = _totalSupply;

		emit Transfer(address(0x0), msg.sender, _totalSupply);
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() external view returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5,05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {COX} uses, unless {_setupDecimals} is
     * called.
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {ICOX-balanceOf} and {ICOX-transfer}.
     */
    function decimals() external view returns (uint8) {
        return _decimals;
    }

    /**
     * @dev See {ICOX-totalSupply}.
     */
    function totalSupply() public view returns (uint256) {
        return _board.totalSupply;
    }

    /**
     * @dev See {ICOX-balanceOf}.
     */
    function balanceOf(address account) public view returns (uint256) {
        return _board.parties[account].balance;
    }

    /**
     * @dev See {ICOX-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) external virtual returns (bool) {
        _transfer(msg.sender, recipient, amount);
        
        return true;
    }

    /**
     * @dev See {ICOX-allowance}.
     */
    function allowance(address owner, address spender) external view virtual returns (uint256) {
        return _board.parties[owner].allowance[spender];
    }

    /**
     * @dev See {ICOX-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) external virtual returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    /**
     * @dev See {ICOX-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {COX};
     *
     * Requirements:
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for ``sender``'s tokens of at least
     * `amount`.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external virtual returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _board.parties[sender].allowance[msg.sender].sub(amount, "COX: transfer amount exceeds allowance"));
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {ICOX-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {
        _approve(msg.sender, spender, _board.parties[msg.sender].allowance[spender].add(addedValue));
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {ICOX-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {
        _approve(msg.sender, spender, _board.parties[msg.sender].allowance[spender].sub(subtractedValue, "COX: decreased allowance below zero"));
        return true;
    }

    /**
     * @dev Moves tokens `amount` from `sender` to `recipient`.
     *
     * This is internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "COX: transfer from the zero address");
        require(recipient != address(0), "COX: transfer to the zero address");
        require(balanceOf(sender) >= amount,"Insufficient fund");

        _board.parties[sender].balance = _board.parties[sender].balance.sub(amount, "COX: transfer amount exceeds balance");
        
        _board.parties[recipient].balance = _board.parties[recipient].balance.add(amount);

        emit Transfer(sender, recipient, amount);
    }
    

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "COX: burn from the zero address");


        _board.parties[account].balance = _board.parties[account].balance.sub(amount, "COX: burn amount exceeds balance");
        _board.totalSupply = _board.totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    function _inner_burn(uint256 amount) internal virtual {
        _board.totalSupply = _board.totalSupply.sub(amount);
        emit Transfer(msg.sender, address(0), amount);
    }

    function burn(uint256 amount) external virtual {
        require(amount <= _board.parties[msg.sender].balance,"Insufficient fund");

        _burn(msg.sender,amount);

        emit Burn(amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.
     *
     * This is internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "COX: approve from the zero address");
        require(spender != address(0), "COX: approve to the zero address");

        _board.parties[owner].allowance[spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function changeAdmin(address _to) external virtual onlyOwner {
        
        _transfer(msg.sender,_to,_board.parties[msg.sender].balance);
        
        _board.owner = _to;
        
    }


    function stakeOf(address account) public view returns (uint256) {
        return _board.parties[account].staked;
    }

    function totalStaked() public view returns (uint256) {
        return _board.totalStaked;
    }

    function totalStakers() public view returns (uint256) {
        return _board.totalStakers;
    }

    function _stake(uint256 amount, uint package) internal {
        require(balanceOf(msg.sender) >= amount,"your balance must be greater or equal to the stake amount");
        require(amount >= _Min_Stake,"your stake is below minimum");
        require(_packages[package] > 0,"unknown package");
        
        if(_board.parties[msg.sender].staked == 0){
            _board.totalStakers = _board.totalStakers.add(1); 
        }

        _board.totalStaked = _board.totalStaked.add(amount);
        _board.parties[msg.sender].balance = _board.parties[msg.sender].balance.sub(amount);
        _board.parties[msg.sender].staked = _board.parties[msg.sender].staked.add(amount);
        
        uint id = _board.parties[msg.sender].stakes.length;
        string memory packageName = _package_names[package];
        uint256 interest = _packages[package].mul(amount).mul(_Scale).div(100).div(_package_duration[package]);

        _board.parties[msg.sender].stakes.push(StakeData(id,packageName,interest,_package_duration[package],amount,_addDays(block.timestamp,_package_duration[package]),false));
        
        emit Stake(msg.sender, amount);
    }

    
    function stake(uint256 amount,uint package) external virtual whenStakeEnabled {
        
        _stake(amount,package);

    }

    function unStake(uint id) external virtual {
        require(_board.parties[msg.sender].staked > 0 && _board.parties[msg.sender].stakes.length > id && id >=0,"stake not found");

        StakeData memory elem = _board.parties[msg.sender].stakes[id];

        require(elem.redeemed == false,"you can't redeem stake twice");
        _board.parties[msg.sender].stakes[id].redeemed = true;

        uint256 currentDays = _currentDaysCount(elem.duration,block.timestamp, elem.timestamp);

        require(currentDays > 0,"same day unstake not allowed");

        uint256 reward = currentDays.mul(elem.intPerDay).div(_Scale);
        uint256 staked = elem.totalStaked;

        _board.totalStaked = _board.totalStaked.sub(staked);
        _board.parties[msg.sender].staked = _board.parties[msg.sender].staked.sub(staked);
        if(_board.parties[msg.sender].staked == 0){
            _board.totalStakers = _board.totalStakers.sub(1);
        }


        if(currentDays < elem.duration){
            uint256 reward_tax = reward.mul(_reward_tax).div(100);
            uint256 staked_tax = staked.mul(_stake_tax).div(100);

            reward = reward.sub(reward_tax);
            staked = staked.sub(staked_tax);

            if(_burn_tax){
                _inner_burn(staked_tax);
                csr.burnFrom(reward_tax);
            }else{
                _board.parties[_csrp].balance = _board.parties[_csrp].balance.add(staked_tax);
                require(csr.transfer(_csrp, reward_tax),"COX: CSR Transfer failed");
            }
        }
        
        _board.parties[msg.sender].balance = _board.parties[msg.sender].balance.add(staked);

        require(csr.transfer(msg.sender, reward),"COX: CSR Transfer failed ");

        emit StakeGain(msg.sender, reward);

        emit UnStake(msg.sender, elem.totalStaked);
    }


    function setMinStake(uint256 amount) external virtual onlyOwner returns(uint256) {
         require(amount >= 1e18,"amount must in ether (18 decimal)");
         _Min_Stake = amount;
         return _Min_Stake;
    }

    function minStake() external view returns(uint256) {
        return _Min_Stake;
    }

    function partyDetails(address sender) external view returns (uint256 balance,uint256 staked, uint256 stakes){
       return (balanceOf(sender),stakeOf(sender),_board.parties[sender].stakes.length);
    }

    function partyStake(uint256 stakeId) external view returns (uint256 id, string memory package, uint256 returnPerDay, uint duration, uint256 staked,  uint256 timestamp,
        bool redeemed) {
        require(_board.parties[msg.sender].stakes.length > 0 && _board.parties[msg.sender].stakes.length > stakeId && stakeId >=0,"stake not found");

        StakeData memory elem = _board.parties[msg.sender].stakes[stakeId];

        return (elem.id,elem.package,elem.intPerDay, elem.duration,elem.totalStaked,elem.timestamp,elem.redeemed);
    }

    function partyStakeReward(uint256 stakeId, uint256 atTimestamp) external view returns (uint256) {
        require(_board.parties[msg.sender].stakes.length > 0 && _board.parties[msg.sender].stakes.length > stakeId && stakeId >=0,"stake not found");

        StakeData memory elem = _board.parties[msg.sender].stakes[stakeId];

        uint256 currentDay = _currentDaysCount(elem.duration, atTimestamp, elem.timestamp);

        if(currentDay == 0) return 0;

        return currentDay.mul(elem.intPerDay).div(_Scale);
    }

    function setEnableStake(uint enableStake) external virtual onlyOwner returns (bool) {
        require(enableStake == 1 || enableStake == 0,"1|0 is required");
        if(enableStake == 1) _enableStake = true;
        else if(enableStake == 0) _enableStake = false; 
        return _enableStake;
    }

    function viewEnableStake() external view returns (bool) {
        return _enableStake;
    }

    function ViewBoardMan() external view returns (address){
        return _board.owner;
    }

    function SetCsr(IBEP20 _csr) external virtual onlyOwner {
        
        csr = _csr;
    }
    
    function SetCsrPt(address csrp) external virtual onlyOwner {
        require(csrp != address(0x0),"address can not be 0x0");
        
        _csrp = csrp;
    }
    

    function _addDays(uint timestamp, uint _days) internal pure returns (uint) {
        uint newTimestamp = timestamp + _days * SECONDS_PER_DAY;
        return newTimestamp;
    }

    function _remainingDaysFromNow(uint256 fromTimestamp,uint256 toTimestamp) internal pure returns (uint256) {
        if(fromTimestamp >= toTimestamp){
            return 0;
        }
        return uint256((toTimestamp - fromTimestamp) / SECONDS_PER_DAY);
    }

    function _currentDaysCount(uint duration,uint256 fromTimestamp,uint256 toTimestamp) internal pure returns (uint256){
        uint256 remainingDays = _remainingDaysFromNow(fromTimestamp,toTimestamp);
        
        return uint256(duration.sub(remainingDays));
    }

    function currentDayOfStake(uint duration,uint256 fromTimestamp,uint256 toTimestamp) public pure returns (uint256){
        return _currentDaysCount(duration,fromTimestamp,toTimestamp);
    }

    function SetStakeTaxDetails(uint256 stake_tax,uint256 reward_tax) external virtual onlyOwner {
        require(stake_tax >0 && reward_tax > 0,"unstake tax percent must be greater than zero");

        _stake_tax = stake_tax;
        _reward_tax = reward_tax;
    }

    function CheckStakeTax() public view returns (uint256 stake_tax,uint256 reward_tax,uint256 burn_tax) {
        uint256 burnIt = _burn_tax == true ? 1 : 0;

        return (_stake_tax,_reward_tax,burnIt);
    }

    function UpdateTaxBurn() external virtual onlyOwner {
         _burn_tax = !_burn_tax;
    }

    function SetPackage(uint256 id, uint256 interest, string calldata package_name, uint256 duration) external virtual onlyOwner {
        _packages[id]= interest;
        _package_names[id] = package_name;
        _package_duration[id]= duration;
    }

    function ViewPackage(uint256 id) public view returns (uint256 interest, string memory package_name, uint256 duration) {
        return (
        _packages[id],
        _package_names[id],
        _package_duration[id]
        );
    }
    

}